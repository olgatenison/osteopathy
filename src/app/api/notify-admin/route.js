// src/app/api/notify-admin/route.js
import { parse } from "date-fns";
import { ru } from "date-fns/locale";
import { formatInTimeZone, fromZonedTime } from "date-fns-tz"; // ‚¨ÖÔ∏è –¥–æ–±–∞–≤–∏–ª–∏ tz
import nodemailer from "nodemailer";

export const runtime = "nodejs";

const TZ = "Europe/Tallinn";

const transporter = nodemailer.createTransport({
  host: "smtp.gmail.com",
  port: 587,
  secure: false,
  auth: {
    user: process.env.MAIL_USER,
    pass: process.env.MAIL_PASS,
  },
});

export async function POST(req) {
  try {
    const body = await req.json();
    const {
      clientName,
      clientEmail,
      clientPhone,
      appointmentDate, // –º–æ–∂–µ—Ç –±—ã—Ç—å "yyyy-MM-dd" –∏–ª–∏ ISO "2025-08-30T10:00:00+03:00/ Z"
      selectedSlot, // { start: "HH:mm", end: "HH:mm" }
      message,
    } = body;

    if (!clientName || !clientEmail || !appointmentDate || !selectedSlot) {
      return new Response(
        JSON.stringify({ message: "Missing required fields" }),
        { status: 400 }
      );
    }

    // --- –°–¢–†–û–ò–ú –¢–û–ß–ù–û–ï –í–†–ï–ú–Ø –í –¢–ê–õ–õ–ò–ù–ù–ï ---
    let startUtc;
    if (typeof appointmentDate === "string" && appointmentDate.includes("T")) {
      // –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª ISO (—Å –æ—Ñ—Ñ—Å–µ—Ç–æ–º –∏–ª–∏ Z) ‚Äî —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
      startUtc = new Date(appointmentDate);
    } else {
      // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞, —Å–æ–±–∏—Ä–∞–µ–º –µ—ë —Å –≤—Ä–µ–º–µ–Ω–µ–º —Å–ª–æ—Ç–∞ –≤ –ª–æ–∫–∞–ª–∏ –¢–∞–ª–ª–∏–Ω–Ω–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ UTC
      const startLocal = parse(
        `${appointmentDate} ${selectedSlot.start}`,
        "yyyy-MM-dd HH:mm",
        new Date()
      );
      startUtc = fromZonedTime(startLocal, TZ); // –±—ã–ª–æ zonedTimeToUtc –≤ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ Europe/Tallinn (–¥–µ–Ω—å –Ω–µ ¬´—Å—ä–µ–∑–∂–∞–µ—Ç¬ª)
    const formattedDate = formatInTimeZone(startUtc, TZ, "d MMMM yyyy, HH:mm", {
      locale: ru,
    });

    const adminText = `
–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—ë–º üì©

üë§ –ö–ª–∏–µ–Ω—Ç:
–ò–º—è: ${clientName}
Email: ${clientEmail}
–¢–µ–ª–µ—Ñ–æ–Ω: ${clientPhone || "–Ω–µ —É–∫–∞–∑–∞–Ω"}

üìÖ –î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞: ${formattedDate}
üïí –í—Ä–µ–º—è: ${selectedSlot.start} ‚Äì ${selectedSlot.end}

üìå –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞:
${message || "–Ω–µ—Ç"}
    `.trim();

    const clientText = `
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${clientName}!

–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–∏—ë–º –∫ –æ—Å—Ç–µ–æ–ø–∞—Ç—É.

üìÖ –î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞: ${formattedDate}
üïí –í—Ä–µ–º—è: ${selectedSlot.start} ‚Äì ${selectedSlot.end}

üìç –ê–¥—Ä–µ—Å: Peterburi tee 2f, Tallinn, Estonia
üìû –¢–µ–ª–µ—Ñ–æ–Ω: +372 5724 5897

–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –∑–∞—Ä–∞–Ω–µ–µ.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–†—É—Å–ª–∞–Ω –ì—É–ª–∏—à–µ–≤—Å–∫–∏–π
    `.trim();

    // üìß –ê–¥–º–∏–Ω—É
    await transporter.sendMail({
      from: `"–û—Å—Ç–µ–æ–ø–∞—Ç–∏—è" <${process.env.MAIL_USER}>`,
      to: process.env.ADMIN_EMAIL,
      subject: "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å —Å–∞–π—Ç–∞",
      text: adminText,
    });

    // üìß –ö–ª–∏–µ–Ω—Ç—É
    await transporter.sendMail({
      from: `"–û—Å—Ç–µ–æ–ø–∞—Ç–∏—è" <${process.env.MAIL_USER}>`,
      to: clientEmail,
      subject: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º",
      text: clientText,
    });

    return new Response(
      JSON.stringify({ message: "Admin & client notified successfully" }),
      { status: 200 }
    );
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º:", error);
    return new Response(
      JSON.stringify({
        message: "Failed to send emails",
        error: String(error),
      }),
      { status: 500 }
    );
  }
}
