import { supabase } from "@/lib/supabase";
import { NextResponse } from "next/server";

export async function POST() {
  const now = new Date();

  // –ó–∞–≤—Ç—Ä–∞ –∏ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
  const tomorrow = new Date(now);
  tomorrow.setDate(tomorrow.getDate() + 1);

  const dayAfterTomorrow = new Date(now);
  dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 2);

  // –ó–∞–≤—Ç—Ä–∞ 10:00
  const tomorrow10AM = new Date(tomorrow);
  tomorrow10AM.setHours(10, 0, 0, 0);

  // –ó–∞–≤—Ç—Ä–∞ 23:59:59
  const tomorrowEnd = new Date(tomorrow);
  tomorrowEnd.setHours(23, 59, 59, 999);

  // –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ 00:00
  const dayAfterStart = new Date(dayAfterTomorrow);
  dayAfterStart.setHours(0, 0, 0, 0);

  // –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ 09:59:59
  const dayAfter10AM = new Date(dayAfterTomorrow);
  dayAfter10AM.setHours(9, 59, 59, 999);

  console.log(
    `üìÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã:
    1Ô∏è‚É£ –ó–∞–≤—Ç—Ä–∞ —Å ${tomorrow10AM.toISOString()} –¥–æ ${tomorrowEnd.toISOString()}
    2Ô∏è‚É£ –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ —Å ${dayAfterStart.toISOString()} –¥–æ ${dayAfter10AM.toISOString()}`
  );

  const { data: slots, error } = await supabase
    .from("slots")
    .select("id, start, client_id, clients (email, first_name)")
    .eq("booked", true)
    .eq("reminder_sent", false)
    .or(
      `and(start.gte.${tomorrow10AM.toISOString()},start.lte.${tomorrowEnd.toISOString()}),and(start.gte.${dayAfterStart.toISOString()},start.lte.${dayAfter10AM.toISOString()})`
    );

  if (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤:", error);
    return NextResponse.json(
      { error: "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–æ–≤" },
      { status: 500 }
    );
  }

  if (!slots || slots.length === 0) {
    console.log("‚ÑπÔ∏è –ù–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π");
    return NextResponse.json({ message: "–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π" }, { status: 200 });
  }

  for (const slot of slots) {
    const { email, first_name } = slot.clients;

    try {
      console.log(`üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è: ${email}`);

      await fetch(`${process.env.BASE_URL}/api/send-email`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          to: email,
          subject: "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å",
          text: `–ü—Ä–∏–≤—ñ—Ç, ${first_name}! –ù–∞–≥–∞–¥—É—î–º–æ, —â–æ —É –≤–∞—Å –∑–∞–ø–∏—Å –Ω–∞ ${new Date(
            slot.start
          ).toLocaleString()}.`,
        }),
      });

      await supabase
        .from("slots")
        .update({ reminder_sent: true })
        .eq("id", slot.id);

      console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${email}`);
    } catch (sendError) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è ${email}:`, sendError);
    }
  }

  return NextResponse.json({ message: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã" });
}
