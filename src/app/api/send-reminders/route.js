import { supabase } from "@/lib/supabase";
import { NextResponse } from "next/server";

export async function POST() {
  const now = new Date();

  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—á–∞—Ç–æ–∫ —ñ –∫—ñ–Ω–µ—Ü—å –∑–∞–≤—Ç—Ä–∞—à–Ω—å–æ–≥–æ –¥–Ω—è
  const tomorrowStart = new Date();
  tomorrowStart.setDate(tomorrowStart.getDate() + 1);
  tomorrowStart.setHours(0, 0, 0, 0);

  const tomorrowEnd = new Date(tomorrowStart);
  tomorrowEnd.setHours(23, 59, 59, 999);

  console.log(
    `üìÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ª–æ—Ç–∏ –º—ñ–∂ ${tomorrowStart.toISOString()} —ñ ${tomorrowEnd.toISOString()}`
  );

  // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω—ñ —Å–ª–æ—Ç–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
  const { data: slots, error } = await supabase
    .from("slots")
    .select("id, start, client_id, clients (email, first_name)")
    .eq("booked", true)
    .eq("reminder_sent", false)
    .gte("start", tomorrowStart.toISOString())
    .lte("start", tomorrowEnd.toISOString());

  if (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Å–ª–æ—Ç—ñ–≤:", error);
    return NextResponse.json(
      { error: "–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Å–ª–æ—Ç—ñ–≤" },
      { status: 500 }
    );
  }

  if (!slots || slots.length === 0) {
    console.log("‚ÑπÔ∏è –ù–µ–º–∞—î —Å–ª–æ—Ç—ñ–≤ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è");
    return NextResponse.json({ message: "–ù–µ–º–∞—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å" }, { status: 200 });
  }

  for (const slot of slots) {
    const { email, first_name } = slot.clients;

    try {
      console.log(`üìß –ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è: ${email}`);

      await fetch(`${process.env.BASE_URL}/api/send-email`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          to: email,
          subject: "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å",
          text: `–ü—Ä–∏–≤—ñ—Ç, ${first_name}! –ù–∞–≥–∞–¥—É—î–º–æ, —â–æ —É –≤–∞—Å –∑–∞–ø–∏—Å –Ω–∞ ${new Date(
            slot.start
          ).toLocaleString()}.`,
        }),
      });

      // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —Å–ª–æ—Ç —è–∫ –Ω–∞–≥–∞–¥–∞–Ω–∏–π
      await supabase
        .from("slots")
        .update({ reminder_sent: true })
        .eq("id", slot.id);

      console.log(`‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç—É ${email}`);
    } catch (sendError) {
      console.error(
        `‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è ${email}:`,
        sendError
      );
    }
  }

  return NextResponse.json({ message: "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ" });
}
